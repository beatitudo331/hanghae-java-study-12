float f = (float)l;
i = (int)ch;





System.out.println(y >= 5 || x < 0 && x > 2);
//정답 : true 이유 : &&의 결과와 상관 없이 ||이 충족하면 true

System.out.println(y += 10 - x++);
//정답 : 13 이유 : +=는 증가 연산자이므로 5와 더해 15. x++는 해당 line이 실행된 뒤 +1 처리를 하기 때문에 2만 계산됨. 만약 다음 line에서 y-x를 한다면 13과 x에서 ++된 1이 추가된 3의 값이 빠지기 때문에 10이 나올 것임.

System.out.println(x += 2);
//정답 5 이유 : 선행 line에서 x++라는 숫자가 현재 라인에 반영됨.

System.out.println(!('A' <= c && c <= 'Z'));
//정답 : false 이유 :('A' <= c && c <= 'Z')까지는 true가 맞는데 그것을 거짓 반환하게 하는 논리연산자 !가 제일 바깥에 적용됨.
System.out.println('C' - c);
//정답 : 2 이유 : 홑따옴표는 아스키코드의 값 또한 적용되어 아스키 코드 빼기 결과값이 나옴.
System.out.println('5' - '0');
//정답 : 5 이유 : char + char는 숫자열로 반환된다.
System.out.println(c + 1);
//정답 : 66 이유 : char + 1인데 char + int는 아스키코드 65에 +1을 더한 것에 int형으로 반환된다.
System.out.println(++c);
//정답 : B 이유 : 앞에 ++ 연산자가 있기 때문에 A에서 바이너리 다음인 B로 넘어감.
System.out.println(c++);
//정답 : B 이유 : 뒤에 ++ 연산자가 있기 때문에 바뀌지 않음.
System.out.println(c);
//정답 : C 이유 : 선행 line에서 뒤에 ++ 연산자를 붙여서 다음 코드인 C가 출력된다.