아래 문제를 풀고, 해설을 적어서 github에 md 파일 또는 텍스트 파일로 제출해주세요.

6-8. 다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오) => b,e
a. 모든 생성자의 이름은 클래스의 이름과 동일해야한다.(O)
b. 생성자는 객체를 생성하기 위한 것이다.(X)
=>생성자는 객체를 초기화 하기 위해서 하는 것이다.
c. 클래스에는 생성자가 반드시 하나 이상 있어야 한다.(O)
d. 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다.(O)
e. 생성자는 오버로딩 할 수 없다.(X)
=> 오버로딩 조건만 만족한다면, 오버로딩을 할 수 있다.

6-9. 다음 중 this에 대한 설명으로 맞지 않은 것은? (모두 고르시오) => b
a. 객체 자신을 가리키는 참조변수이다.(O)
b. 클래스 내에서라면 어디서든 사용할 수 있다.(X)
=> 인스턴스 메서드와 생성자에서만 사용 가능.
c. 지역변수와 인스턴스변수를 구별할 때 사용한다.(O)
d. 클래스 메서드 내에서는 사용할 수 없다.(O)

6-10. 다음 중 오버로딩이 성립하기 위한 조건이 아닌 것은? (모두 고르시오) => c,d
a. 메서드의 이름이 같아야 한다.(O)
b. 매개변수의 개수나 타입이 달라야 한다.(O)
c. 리턴타입이 달라야 한다.(X)
=> 리턴타입은 아무 상관없다.
d. 매개변수의 이름이 달라야 한다.(X)
=> 매개변수명이 같더라도 타입이 다르면 된다.

6-11. 다음 중 아래의 add메서드를 올바르게 오버로딩 한 것은? (모두 고르시오) => b,c,d
> long add(int a, int b) { return a+b; }

a. long add(int x, int y) { return x+y; } (X)
=> 매개변수 타입이 같고, 갯수가 똑같이 2개 이기때문에 안 된다.
b. long add(long a, long b) { return a+b; } (O)
=> 메서드 이름이 같고, 매개변수의 타입이 다르기 때문에 오버로딩이 가능하다
c. int add(byte a, byte b) { return a+b; } (O)
=>메서드 이름이 같고, 매개변수의 타입이 다르기 때문에 오버로딩이 가능하다
d. int add(long a, int b) { return (int)(a+b); } (O)
=> 메서드 이름이 같고, 한쪽 매개변수의 타입이 다르기 때문에 오버로딩이 가능하다

6-12. 다음 중 초기화에 대한 설명으로 옳지 않은 것은? (모두 고르시오) => c,e
a. 멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참고할 수 있다.(O)
b. 지역변수는 사용하기 전에 반드시 초기화해야 한다.(O)
   => 지역변수는 사용 빈도가 높기때문에 매번 새로운 값에 대해서 메모리를 할당 하는게 아니라 기존 메모리에 값을 덮어씌운다.
      그런데 Java는 그 값을 알지 못하기 때문에 사용자가 초기화를 통해서 알려줘야 한다
c. 초기화 블럭보다 생성자가 먼저 수행된다.(X)
   =>초기화 블럭이 먼저다
d. 명시적 초기화를 제일 우선적으로 고려해야 한다.(O)
=> 명시적 초기화가 가장 사용하기가 쉽기 때문에 간단한 값을 저장하는 정도라면 제일 우선적으로 고려하는게 좋다.
e. 클래스변수보다 인스턴스변수가 먼저 초기화된다(X)
   =>클래스변수는 클래스가 처음 로딩될때 자동적으로 초기화 되기 때문에 클래스변수가 먼저 초기화 된다

6-13. 다음 중 인스턴스변수의 초기화 순서가 올바른 것은? => a
a. 기본값-명시적초기화-초기화블럭-생성자 (O)
b. 기본값-명시적초기화-생성자-초기화블럭 (X)
c. 기본값-초기화블럭-명시적초기화-생성자 (X)
d. 기본값-초기화블럭-생성자-명시적초기화 (X)

6-14. 다음 중 지역변수에 대한 설명으로 옳지 않은 것은? (모두 고르시오) => a,e
a. 자동 초기화되므로 별도의 초기화가 필요없다. (X)
   => 지역변수는 사용 빈도가 높기때문에 매번 새로운 값에 대해서 메모리를 할당 하는게 아니라 기존 메모리에 값을 덮어씌운다.
      그런데 Java는 그 값을 알지 못하기 때문에 사용자가 초기화를 통해서 꼭 알려줘야 한다
b. 지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸된다. (O)
   => 시작과 동시에 생성이 되고, 종료되면 사라진다.
c. 메서드의 매개변수로 선언된 변수도 지역변수이다. (O)
d. 클래스변수나 인스턴스변수보다 메모리 부담이 적다. (O)
e. 힙(heap)영역에 생성되며 가비지 컬렉터에 의해 소멸된다. (X)
   => 힙(heap)영역은 인스턴스가 생성되는 영역이며, 지역변수는 호출스택(call stack)에 생성된다

6-15. 호출스택이 다음과 같은 상황일 때 옳지 않은 설명은? (모두 고르시오) => b
a. 제일 먼저 호출스택에 저장된 것은 main메서드이다. (O)
b. println메서드를 제외한 나머지 메서드들은 모두 종료된 상태이다. (X)
   =>종료된 상태가 아닌, 대기 상태이며, println메서드가 종료가 되면, 그 밑에 있는 메서드가 순차적으로 다시 실행이 된다.
c. method2메서드를 호출한 것은 main메서드이다. (O)
   =>밑에서부터 위쪽으로 순차적으로 호출된 것이므로 main메서드 바로 위쪽에 있는 method2는 밑에 main메서드에 의해서 호출이 되었다.
d. println메서드가 종료되면 method1메서드가 수행을 재개한다. (O)
e. main-method2-method1-println의 순서로 호출되었다. (O)
   => 호출순서는 밑에서부터 위로 순이다
f. 현재 실행중인 메서드는 println뿐이다. (O)