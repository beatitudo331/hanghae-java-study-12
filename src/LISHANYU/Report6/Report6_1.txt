6-8. 다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오)
정답: a. 모든 생성자의 이름은 클래스의 이름과 동일해야한다.
오답: b. 생성자는 객체를 생성하기 위한 것이다.
    // 객체를 초기화할 목적으로 사용되는 것이다. 객체를 생성하는 것은 new연산자이다.
정답: c. 클래스에는 생성자가 반드시 하나 이상 있어야 한다.
정답: d. 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다.
오답: e. 생성자는 오버로딩 할 수 없다.
    // 생성자도 오버로딩이 가능해서 하나의 클래스에 여러개의 생성자를 정의할 수 있다.

6-9. 다음 중 this에 대한 설명으로 맞지 않은 것은? (모두 고르시오)
정답: a. 객체 자신을 가리키는 참조변수이다.
오답: b. 클래스 내에서라면 어디서든 사용할 수 있다.
    // 인스턴스메서드에서만 사용가능
정답: c. 지역변수와 인스턴스변수를 구별할 때 사용한다.
정답: d. 클래스 메서드 내에서는 사용할 수 없다.

6-10. 다음 중 오버로딩이 성립하기 위한 조건이 아닌 것은? (모두 고르시오)
정답: a. 메서드의 이름이 같아야 한다.
정답: b. 매개변수의 개수나 타입이 달라야 한다.
오답: c. 리턴타입이 달라야 한다.
    // 반환 타입은 관계없다
오답: d. 매개변수의 이름이 달라야 한다.
    // 리턴타입은 관계없다.

6-11. 다음 중 아래의 add메서드를 올바르게 오버로딩 한 것은? (모두 고르시오)
> long add(int a, int b) { return a+b; }

오답: a. long add(int x, int y) { return x+y; }
    // 메서드 이름이 같지만 매개변수의 이름만 다를 뿐 매개변수의 타입은 같기때문에 오답
정답: b. long add(long a, long b) { return a+b; }
    // 메서드 이름 같고, 매개변수의 타입이 다르기때문에 정답.
정답: c. int add(byte a, byte b) { return a+b; }
    //메서드 이름 같고, 매개변수의 타입이 다르기때문에 정답.
정답: d. int add(long a, int b) { return (int)(a+b); }
    // 메서드 이름 같고, 매개변수의 타입이 다르기때문에 정답.

6-12. 다음 중 초기화에 대한 설명으로 옳지 않은 것은? (모두 고르시오)
정답: a. 멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참고할 수 있다.
정답: b. 지역변수는 사용하기 전에 반드시 초기화해야 한다.
오답: c. 초기화 블럭보다 생성자가 먼저 수행된다.
    // 초기화블럭이 생성자보다 먼저 생성된다.
정답: d. 명시적 초기화를 제일 우선적으로 고려해야 한다.
오답: e. 클래스변수보다 인스턴스변수가 먼저 초기화된다
    //클래스변수 초기화 -> 인스턴스변수 초기화

6-13. 다음 중 인스턴스변수의 초기화 순서가 올바른 것은?
정답: a. 기본값-명시적초기화-초기화블럭-생성자
오답: b. 기본값-명시적초기화-생성자-초기화블럭
오답: c. 기본값-초기화블럭-명시적초기화-생성자
오답: d. 기본값-초기화블럭-생성자-명시적초기화

6-14. 다음 중 지역변수에 대한 설명으로 옳지 않은 것은? (모두 고르시오)
오답: a. 자동 초기화되므로 별도의 초기화가 필요없다.
    // 지역변수의 초기화는 필수이다.
정답: b. 지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸된다.
정답: c. 메서드의 매개변수로 선언된 변수도 지역변수이다.
정답: d. 클래스변수나 인스턴스변수보다 메모리 부담이 적다.
오답: e. 힙(heap)영역에 생성되며 가비지 컬렉터에 의해 소멸된다.
    // 힙(heap)영역: 인스턴스가 생성되는 영역.    지역변수는 호출스택에 생성된다.

6-15. 호출스택이 다음과 같은 상황일 때 옳지 않은 설명은? (모두 고르시오)
정답: a. 제일 먼저 호출스택에 저장된 것은 main메서드이다.
오답: b. println메서드를 제외한 나머지 메서드들은 모두 종료된 상태이다.
정답: c. method2메서드를 호출한 것은 main메서드이다.
정답: d. println메서드가 종료되면 method1메서드가 수행을 재개한다.
정답: e. main-method2-method1-println의 순서로 호출되었다.
정답: f. 현재 실행중인 메서드는 println뿐이다.

//6-16. 다음 코드의 실행 결과를 예측하여 적어주세요.
class Exercise6_16 {
    public static void change(String str) {
        str += "456";
    }

    public static void main(String[] args) {
        String str = "ABC123";
        System.out.println(str);
        change(str);
        System.out.println("After change:" + str);
    }
}

답안: "ABC123"
      "After change:" + str
     이유: 문자열은 내용을 변경 할 수 없기 떄문에 덧셈연삼을 하면 새로운 문자열이 생성되어 새로운 문자열의 주소가 변수 str(0*200)에 저장된다.
     change메서드가 종료되면 메모리를 반환하고 change메서드가 삭제된다. 그리고 main메서도에 돌아오면 str(0*100)변수에는 여전히 같은 값이 출력된다.